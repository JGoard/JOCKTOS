<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="structcoreRegistersDef" kind="struct" language="C++" prot="public">
    <compoundname>coreRegistersDef</compoundname>
    <includes refid="main_8h" local="no">main.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structcoreRegistersDef_1a5fef3e7e9e1e252deaefa4b34c06a4e6" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t coreRegistersDef::registers[13]</definition>
        <argsstring>[13]</argsstring>
        <name>registers</name>
        <qualifiedname>coreRegistersDef::registers</qualifiedname>
        <briefdescription>
<para>R0-R12 are 32-bit general-purpose registers for data operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/JOCKTOS/jocktos/main.h" line="8" column="14" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcoreRegistersDef_1adeea21c076fcb4f87d1ecaed25895b6d" prot="public" static="no" mutable="no">
        <type>uint32_t *</type>
        <definition>uint32_t* coreRegistersDef::stack_pointer</definition>
        <argsstring></argsstring>
        <name>stack_pointer</name>
        <qualifiedname>coreRegistersDef::stack_pointer</qualifiedname>
        <briefdescription>
<para>The Stack Pointer (SP) is register R13. </para>
        </briefdescription>
        <detaileddescription>
<para>In Thread mode, bit[1] of the CONTROL register indicates the stack pointer to use:<itemizedlist>
<listitem><para>0: Main Stack Pointer (MSP). This is the reset value.</para>
</listitem><listitem><para>1: Process Stack Pointer (PSP). On reset, the processor loads the MSP with the value from address 0x00000000. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/JOCKTOS/jocktos/main.h" line="17" column="14" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcoreRegistersDef_1ae52ca5652b22e7db3d77ae73f1062fa2" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t coreRegistersDef::link_register</definition>
        <argsstring></argsstring>
        <name>link_register</name>
        <qualifiedname>coreRegistersDef::link_register</qualifiedname>
        <briefdescription>
<para>The Link Register (LR) is register R14. </para>
        </briefdescription>
        <detaileddescription>
<para>It stores the return information for subroutines, function calls, and exceptions. On reset, the processor loads the LR value 0xFFFFFFFF. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/JOCKTOS/jocktos/main.h" line="24" column="14" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcoreRegistersDef_1a8b5a9b4ec34711856612808b662fe434" prot="public" static="no" mutable="no">
        <type>uint32_t *</type>
        <definition>uint32_t* coreRegistersDef::program_counter</definition>
        <argsstring></argsstring>
        <name>program_counter</name>
        <qualifiedname>coreRegistersDef::program_counter</qualifiedname>
        <briefdescription>
<para>The Program Counter (PC) is register R15. </para>
        </briefdescription>
        <detaileddescription>
<para>It contains the current program address. On reset, the processor loads the PC with the value of the reset vector, which is at address 0x00000004. Bit[0] of the value is loaded into the EPSR T-bit at reset and must be 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/JOCKTOS/jocktos/main.h" line="32" column="14" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcoreRegistersDef_1a3f5cc5d105570494942ff52303451402" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t coreRegistersDef::program_status_register</definition>
        <argsstring></argsstring>
        <name>program_status_register</name>
        <qualifiedname>coreRegistersDef::program_status_register</qualifiedname>
        <briefdescription>
<para>The Program Status Register (PSR) combines: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Application Program Status Register (APSR)</para>
</listitem><listitem><para>Interrupt Program Status Register (IPSR)</para>
</listitem><listitem><para>Execution Program Status Register (EPSR) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/JOCKTOS/jocktos/main.h" line="39" column="14" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcoreRegistersDef_1ac3ccf963da6921d07110ee3b3b86f6ab" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t coreRegistersDef::exception_markers[3]</definition>
        <argsstring>[3]</argsstring>
        <name>exception_markers</name>
        <qualifiedname>coreRegistersDef::exception_markers</qualifiedname>
        <briefdescription>
<para>Exception Markers contain: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Priority Fault Mask Register (PRIMASK)</para>
</listitem><listitem><para>Fault Mask Register (FAULTMASK)</para>
</listitem><listitem><para>Base Priority Mask Register (BASEPRI) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/JOCKTOS/jocktos/main.h" line="46" column="14" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcoreRegistersDef_1af745cb58b24bb2591c1431b31c85c3af" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t coreRegistersDef::control_register</definition>
        <argsstring></argsstring>
        <name>control_register</name>
        <qualifiedname>coreRegistersDef::control_register</qualifiedname>
        <briefdescription>
<para>The CONTROL register controls the stack used and the privilege level for software execution when the processor is in Thread mode and indicates whether the FPU state is active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/JOCKTOS/jocktos/main.h" line="52" column="14" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>STM32 Cortex-M4 Core Registers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/JOCKTOS/jocktos/main.h" line="5" column="1" bodyfile="/JOCKTOS/jocktos/main.h" bodystart="5" bodyend="54"/>
    <listofallmembers>
      <member refid="structcoreRegistersDef_1af745cb58b24bb2591c1431b31c85c3af" prot="public" virt="non-virtual"><scope>coreRegistersDef</scope><name>control_register</name></member>
      <member refid="structcoreRegistersDef_1ac3ccf963da6921d07110ee3b3b86f6ab" prot="public" virt="non-virtual"><scope>coreRegistersDef</scope><name>exception_markers</name></member>
      <member refid="structcoreRegistersDef_1ae52ca5652b22e7db3d77ae73f1062fa2" prot="public" virt="non-virtual"><scope>coreRegistersDef</scope><name>link_register</name></member>
      <member refid="structcoreRegistersDef_1a8b5a9b4ec34711856612808b662fe434" prot="public" virt="non-virtual"><scope>coreRegistersDef</scope><name>program_counter</name></member>
      <member refid="structcoreRegistersDef_1a3f5cc5d105570494942ff52303451402" prot="public" virt="non-virtual"><scope>coreRegistersDef</scope><name>program_status_register</name></member>
      <member refid="structcoreRegistersDef_1a5fef3e7e9e1e252deaefa4b34c06a4e6" prot="public" virt="non-virtual"><scope>coreRegistersDef</scope><name>registers</name></member>
      <member refid="structcoreRegistersDef_1adeea21c076fcb4f87d1ecaed25895b6d" prot="public" virt="non-virtual"><scope>coreRegistersDef</scope><name>stack_pointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
